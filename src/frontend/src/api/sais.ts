/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';
import { useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type { ErrorType } from './axiosInstance';
import { axiosInstance } from './axiosInstance';

export interface UserDto {
  email?: string;
  username?: string;
}


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const test = (
  options?: SecondParameter<typeof axiosInstance>, signal?: AbortSignal,
) => {


  return axiosInstance<UserDto>(
    {
      url: `/`, method: 'GET', signal,
    },
    options);
};


export const getTestQueryKey = () => {
  return [`/`] as const;
};


export const getTestQueryOptions = <TData = Awaited<ReturnType<typeof test>>, TError = ErrorType<unknown>>(options?: {
                                                                                                             query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>>,
                                                                                                             request?: SecondParameter<typeof axiosInstance>
                                                                                                           },
) => {

  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTestQueryKey();


  const queryFn: QueryFunction<Awaited<ReturnType<typeof test>>> = ({ signal }) => test(requestOptions, signal);


  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData> & {
    queryKey: QueryKey
  };
};

export type TestQueryResult = NonNullable<Awaited<ReturnType<typeof test>>>
export type TestQueryError = ErrorType<unknown>


export function useTest<TData = Awaited<ReturnType<typeof test>>, TError = ErrorType<unknown>>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>> & Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof test>>,
        TError,
        TData
      >, 'initialData'
    >, request?: SecondParameter<typeof axiosInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useTest<TData = Awaited<ReturnType<typeof test>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>> & Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof test>>,
        TError,
        TData
      >, 'initialData'
    >, request?: SecondParameter<typeof axiosInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useTest<TData = Awaited<ReturnType<typeof test>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>>,
    request?: SecondParameter<typeof axiosInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useTest<TData = Awaited<ReturnType<typeof test>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>>,
    request?: SecondParameter<typeof axiosInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getTestQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const getTestSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof test>>, TError = ErrorType<unknown>>(options?: {
                                                                                                                     query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>>,
                                                                                                                     request?: SecondParameter<typeof axiosInstance>
                                                                                                                   },
) => {

  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTestQueryKey();


  const queryFn: QueryFunction<Awaited<ReturnType<typeof test>>> = ({ signal }) => test(requestOptions, signal);


  return {
    queryKey,
    queryFn, ...queryOptions,
  } as UseSuspenseQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData> & { queryKey: QueryKey };
};

export type TestSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof test>>>
export type TestSuspenseQueryError = ErrorType<unknown>


export function useTestSuspense<TData = Awaited<ReturnType<typeof test>>, TError = ErrorType<unknown>>(
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>>,
    request?: SecondParameter<typeof axiosInstance>
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useTestSuspense<TData = Awaited<ReturnType<typeof test>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>>,
    request?: SecondParameter<typeof axiosInstance>
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useTestSuspense<TData = Awaited<ReturnType<typeof test>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>>,
    request?: SecondParameter<typeof axiosInstance>
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useTestSuspense<TData = Awaited<ReturnType<typeof test>>, TError = ErrorType<unknown>>(
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof test>>, TError, TData>>,
    request?: SecondParameter<typeof axiosInstance>
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getTestSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}




